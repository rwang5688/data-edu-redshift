AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  DatabaseName:
    Description: The name of the first database to be created when the cluster is
      created
    Type: String
    Default: dev
    AllowedPattern: "([a-z]|[0-9])+"
  NumberOfNodes:
    Description: The number of compute nodes in the cluster. For multi-node clusters,
      the NumberOfNodes parameter must be greater than 1
    Type: Number
    MinValue: 2
    Default: 2
  NodeType:
    Description: The type of node to be provisioned
    Type: String
    Default: ra3.xlplus
    AllowedValues:
    - dc2.large
    - dc2.8xlarge
    - ra3.xlplus
    - ra3.4xlarge
    - ra3.16xlarge
  MasterUsername:
    Description: The user name that is associated with the master user account for the cluster that is being created
    Type: String
    Default: awsuser
    AllowedPattern: "([a-z])([a-z]|[0-9])*"
  MasterUserPassword:
    Description: The password that is associated with the master user account for the cluster that is being created. Default is Awsuser123
    Type: String
    Default: Awsuser123
    NoEcho: 'true'
  InboundTraffic:
    Description: The IP address CIDR range (x.x.x.x/x) to connect from your local machine.  FYI, get your address using http://www.whatismyip.com.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
  PortNumber:
    Description: The port number on which the cluster accepts incoming connections.
    Type: Number
    Default: '5439'
  RedshiftRole:
    Description: "ARN of the Redshift role that grants your cluster access to other AWS services"
    Type: String
    AllowedPattern : "arn:aws:iam::[0-9]+:.*"
    ConstraintDescription : "Must be a Redshift IAM Role"
  SubnetA:
    Type: AWS::EC2::Subnet::Id
    Description: Make sure this belongs to the VPC specified below (e.g. 10.0.0.0/24)
  SubnetB:
    Type: AWS::EC2::Subnet::Id
    Description: Make sure this is different from the subnet above (e.g. 10.0.1.0/24)
  RedshiftClusterSecurityGroup:
    Description: "Name of parent stack security group for Redshift cluster"
    Type: AWS::EC2::SecurityGroup::Id
    ConstraintDescription : "Must be list the valid name of the parent security group"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Connection Details"
        Parameters:
          - NodeType
          - NumberOfNodes
          - MasterUsername
          - MasterUserPassword
          - DatabaseName
          - PortNumber
          - InboundTraffic
          - RedshiftRole
          - SubnetA
          - SubnetB
          - RedshiftClusterSecurityGroup
Mappings:
  RegionMap:
    us-west-2: # Oregon
      "S3BucketDirectory" : "redshift-immersionday-labs"
    us-east-1: # Virginia
      "S3BucketDirectory" : "redshift-demos"
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties :
      AssumeRolePolicyDocument:
        Version : 2012-10-17
        Statement :
          -
            Effect : Allow
            Principal :
              Service :
                - lambda.amazonaws.com
            Action :
              - sts:AssumeRole
      Path : /
      Policies:
        -
          PolicyName: LambdaCloudFormationPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub "arn:aws:s3:::cloudformation-custom-resource-response-${AWS::Region}"
                  - !Sub "arn:aws:s3:::cloudformation-waitcondition-${AWS::Region}"
                  - !Sub "arn:aws:s3:::cloudformation-custom-resource-response-${AWS::Region}/*"
                  - !Sub "arn:aws:s3:::cloudformation-waitcondition-${AWS::Region}/*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/AmazonRedshiftFullAccess
  LambdaFunctionDefaultRole2:
    Type: AWS::Lambda::Function
    Properties:
        Timeout: 300
        Code:
          ZipFile: |
            import sys
            import os
            import cfnresponse
            import json
            import logging
            from pip._internal import main

            main(['install', 'boto3', '--target', '/tmp/'])
            sys.path.insert(0,'/tmp/')

            import boto3
            from botocore.exceptions import ClientError

            def lambda_handler(event, context):

              print(boto3.__version__)

              if event['RequestType'] == 'Delete':
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Data': 'Delete complete'})
              else:
                try:
                  client = boto3.client('redshift')
                  response = client.modify_cluster_iam_roles(
                    ClusterIdentifier=os.environ['RedshiftClusterIdentifier'],
                    DefaultIamRoleArn=os.environ['RedshiftClusterRole']
                  )
                  print(response)
                except Exception as e:
                  print(e)
                  logger.error(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Data': 'Create failed'})

              cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Data': 'Create complete'})

              return {
                  'statusCode': 200,
                  'body': json.dumps('Deployed Default Role')
              }

        Environment:
          Variables:
            RedshiftClusterIdentifier:
              Ref: ConsumerCluster
            RedshiftClusterRole:
              Ref: RedshiftRole
        Handler: index.lambda_handler
        Role:
          Fn::GetAtt: [LambdaExecutionRole, Arn]
        Runtime: python3.9
    DependsOn:
      - ConsumerCluster
  PrimerInvokeDefaultRole2:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - LambdaFunctionDefaultRole2
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt 'LambdaFunctionDefaultRole2.Arn'
  ConsumerCluster:
    Type: AWS::Redshift::Cluster
    DependsOn:
      - RedshiftClusterSubnetGroup
    Properties:
      ClusterType: 'multi-node'
      NumberOfNodes:
        Ref: NumberOfNodes
      NodeType:
        Ref: NodeType
      DBName:
        Ref: DatabaseName
      MasterUsername:
        Ref: MasterUsername
      MasterUserPassword:
        Ref: MasterUserPassword
      ClusterParameterGroupName: default.redshift-1.0
      VpcSecurityGroupIds:
        - Ref: RedshiftClusterSecurityGroup
      ClusterSubnetGroupName:
        Ref: RedshiftClusterSubnetGroup
      PubliclyAccessible: 'true'
      Encrypted: 'true'
      Port:
        Ref: PortNumber
      IamRoles:
        - Ref: RedshiftRole
  RedshiftClusterSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: Cluster subnet group
      SubnetIds:
        - !Ref SubnetA
        - !Ref SubnetB
Outputs:
  RedshiftDataSharingRoleName:
    Description: Name of Redshift Role
    Value:
      Ref: RedshiftRole
  ConsumerClusterEndpoint:
      Description: Cluster endpoint for data sharing cluster
      Value: !Sub "${ConsumerCluster.Endpoint.Address}:${ConsumerCluster.Endpoint.Port}"
  RedshiftDataSharingRoleName:
    Description: Name of Redshift Role for data sharing cluster
    Value:
      Ref: RedshiftRole
  ConsumerClusterName:
    Description: Name of data sharing cluster
    Value:
      Ref: ConsumerCluster
